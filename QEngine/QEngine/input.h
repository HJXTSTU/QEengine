#pragma once
#include <vector>
#include <list>
#include "gl_window.h"
enum KeyCode {
	KEY_CODE_SPACE,
	KEY_CODE_APOSTROPHE,
	KEY_CODE_COMMA,
	KEY_CODE_MINUS,
	KEY_CODE_PERIOD,
	KEY_CODE_SLASH,
	KEY_CODE_0,
	KEY_CODE_1,
	KEY_CODE_2,
	KEY_CODE_3,
	KEY_CODE_4,
	KEY_CODE_5,
	KEY_CODE_6,
	KEY_CODE_7,
	KEY_CODE_8,
	KEY_CODE_9,
	KEY_CODE_SEMICOLON,
	KEY_CODE_EQUAL,
	KEY_CODE_A,
	KEY_CODE_B,
	KEY_CODE_C,
	KEY_CODE_D,
	KEY_CODE_E,
	KEY_CODE_F,
	KEY_CODE_G,
	KEY_CODE_H,
	KEY_CODE_I,
	KEY_CODE_J,
	KEY_CODE_K,
	KEY_CODE_L,
	KEY_CODE_M,
	KEY_CODE_N,
	KEY_CODE_O,
	KEY_CODE_P,
	KEY_CODE_Q,
	KEY_CODE_R,
	KEY_CODE_S,
	KEY_CODE_T,
	KEY_CODE_U,
	KEY_CODE_V,
	KEY_CODE_W,
	KEY_CODE_X,
	KEY_CODE_Y,
	KEY_CODE_Z,
	KEY_CODE_LEFT_BRACKET,
	KEY_CODE_BACKSLASH,
	KEY_CODE_RIGHT_BRACKET,
	KEY_CODE_GRAVE_ACCENT,
	KEY_CODE_WORLD_1, 
	KEY_CODE_WORLD_2,
	KEY_CODE_ESCAPE,
	KEY_CODE_ENTER,
	KEY_CODE_TAB,
	KEY_CODE_BACKSPACE,
	KEY_CODE_INSERT,
	KEY_CODE_DELETE,
	KEY_CODE_RIGHT,
	KEY_CODE_LEFT,
	KEY_CODE_DOWN,
	KEY_CODE_UP,
	KEY_CODE_PAGE_UP,
	KEY_CODE_PAGE_DOWN,
	KEY_CODE_HOME,
	KEY_CODE_END,
	KEY_CODE_CAPS_LOCK,
	KEY_CODE_SCROLL_LOCK,
	KEY_CODE_NUM_LOCK,
	KEY_CODE_PRINT_SCREEN,
	KEY_CODE_PAUSE,
	KEY_CODE_F1,
	KEY_CODE_F2,
	KEY_CODE_F3,
	KEY_CODE_F4,
	KEY_CODE_F5,
	KEY_CODE_F6,
	KEY_CODE_F7,
	KEY_CODE_F8,
	KEY_CODE_F9,
	KEY_CODE_F10,
	KEY_CODE_F11,
	KEY_CODE_F12,
	KEY_CODE_F13,
	KEY_CODE_F14,
	KEY_CODE_F15,
	KEY_CODE_F16,
	KEY_CODE_F17,
	KEY_CODE_F18,
	KEY_CODE_F19,
	KEY_CODE_F20,
	KEY_CODE_F21,
	KEY_CODE_F22,
	KEY_CODE_F23,
	KEY_CODE_F24,
	KEY_CODE_F25,
	KEY_CODE_KP_0,
	KEY_CODE_KP_1,
	KEY_CODE_KP_2,
	KEY_CODE_KP_3,
	KEY_CODE_KP_4,
	KEY_CODE_KP_5,
	KEY_CODE_KP_6,
	KEY_CODE_KP_7,
	KEY_CODE_KP_8,
	KEY_CODE_KP_9,
	KEY_CODE_KP_DECIMAL,
	KEY_CODE_KP_DIVIDE,
	KEY_CODE_KP_MULTIPLY,
	KEY_CODE_KP_SUBTRACT,
	KEY_CODE_KP_ADD,
	KEY_CODE_KP_ENTER,
	KEY_CODE_KP_EQUAL,
	KEY_CODE_LEFT_SHIFT,
	KEY_CODE_LEFT_CONTROL,
	KEY_CODE_LEFT_ALT,
	KEY_CODE_LEFT_SUPER,
	KEY_CODE_RIGHT_SHIFT,
	KEY_CODE_RIGHT_CONTROL,
	KEY_CODE_RIGHT_ALT,
	KEY_CODE_RIGHT_SUPER,
	KEY_CODE_MENU,
	KEY_CODE_TOTAL,
};

enum KeyStatus {
	KEY_RELEASED,
	KEY_PRESS,
	KEY_PRESSING,
	KEY_TOTAL_STATUS
};

class Input {
private:
	static std::vector<int> keyCodeHash;

	static bool keyStatus[KEY_CODE_TOTAL][KEY_TOTAL_STATUS];

	static void pushKeyHashRange(int from, int to);

	static void pushKeyHash(int key);

	static void generateKeyCodeHash();

	static std::shared_ptr<Input> instance;

	Input();

public:
	static bool getKeyDown(KeyCode keyCode);

	static bool getKey(KeyCode keyCode);
	
	static bool getKeyUp(KeyCode keyCode);

public:
	void refreshKeyStatus(std::shared_ptr<GLWindow> window);

	static std::shared_ptr<Input> Instance();
};